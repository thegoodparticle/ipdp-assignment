// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: file-server/protobufs/file-data.proto

package file_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileData_GetFileData_FullMethodName = "/FileData/GetFileData"
)

// FileDataClient is the client API for FileData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileDataClient interface {
	GetFileData(ctx context.Context, in *FileDataRequest, opts ...grpc.CallOption) (*FileDataResponse, error)
}

type fileDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFileDataClient(cc grpc.ClientConnInterface) FileDataClient {
	return &fileDataClient{cc}
}

func (c *fileDataClient) GetFileData(ctx context.Context, in *FileDataRequest, opts ...grpc.CallOption) (*FileDataResponse, error) {
	out := new(FileDataResponse)
	err := c.cc.Invoke(ctx, FileData_GetFileData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileDataServer is the server API for FileData service.
// All implementations must embed UnimplementedFileDataServer
// for forward compatibility
type FileDataServer interface {
	GetFileData(context.Context, *FileDataRequest) (*FileDataResponse, error)
	mustEmbedUnimplementedFileDataServer()
}

// UnimplementedFileDataServer must be embedded to have forward compatible implementations.
type UnimplementedFileDataServer struct {
}

func (UnimplementedFileDataServer) GetFileData(context.Context, *FileDataRequest) (*FileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileData not implemented")
}
func (UnimplementedFileDataServer) mustEmbedUnimplementedFileDataServer() {}

// UnsafeFileDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileDataServer will
// result in compilation errors.
type UnsafeFileDataServer interface {
	mustEmbedUnimplementedFileDataServer()
}

func RegisterFileDataServer(s grpc.ServiceRegistrar, srv FileDataServer) {
	s.RegisterService(&FileData_ServiceDesc, srv)
}

func _FileData_GetFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileDataServer).GetFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileData_GetFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileDataServer).GetFileData(ctx, req.(*FileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileData_ServiceDesc is the grpc.ServiceDesc for FileData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileData",
	HandlerType: (*FileDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileData",
			Handler:    _FileData_GetFileData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-server/protobufs/file-data.proto",
}
