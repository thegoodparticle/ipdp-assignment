// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: file-server/protobufs/file-metadata.proto

package file_meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileServer_GetFileMetaInfo_FullMethodName = "/FileServer/GetFileMetaInfo"
)

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerClient interface {
	GetFileMetaInfo(ctx context.Context, in *FileMetaRequest, opts ...grpc.CallOption) (*FileMetaResponse, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) GetFileMetaInfo(ctx context.Context, in *FileMetaRequest, opts ...grpc.CallOption) (*FileMetaResponse, error) {
	out := new(FileMetaResponse)
	err := c.cc.Invoke(ctx, FileServer_GetFileMetaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerServer is the server API for FileServer service.
// All implementations must embed UnimplementedFileServerServer
// for forward compatibility
type FileServerServer interface {
	GetFileMetaInfo(context.Context, *FileMetaRequest) (*FileMetaResponse, error)
	mustEmbedUnimplementedFileServerServer()
}

// UnimplementedFileServerServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerServer struct {
}

func (UnimplementedFileServerServer) GetFileMetaInfo(context.Context, *FileMetaRequest) (*FileMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetaInfo not implemented")
}
func (UnimplementedFileServerServer) mustEmbedUnimplementedFileServerServer() {}

// UnsafeFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServer will
// result in compilation errors.
type UnsafeFileServerServer interface {
	mustEmbedUnimplementedFileServerServer()
}

func RegisterFileServerServer(s grpc.ServiceRegistrar, srv FileServerServer) {
	s.RegisterService(&FileServer_ServiceDesc, srv)
}

func _FileServer_GetFileMetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).GetFileMetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_GetFileMetaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).GetFileMetaInfo(ctx, req.(*FileMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServer_ServiceDesc is the grpc.ServiceDesc for FileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileMetaInfo",
			Handler:    _FileServer_GetFileMetaInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-server/protobufs/file-metadata.proto",
}
